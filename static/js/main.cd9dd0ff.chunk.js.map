{"version":3,"sources":["Components/Cell.js","Components/Field.js","Game/game.js","Components/Fields.js","Components/Message.js","Components/Again.js","Components/Greeting.js","App.js","index.js"],"names":["Cell","props","marker","x","y","hasShip","shooted","isShipVisible","shoot","leftColumn","topLine","className","onClick","Field","field","map","cell","id","key","whose","ships","createEmptyCell","random","num","Math","floor","createEmptyField","push","chooseVerticalOrientation","chooseRandomCellId","cloneField","fillField","length","shipLength","placeShip","initialField","newField","cellId","isVertical","restLength","nextY","newCellId","findIndex","nextX","slice","Fields","playerName","playerField","compField","Message","message","playerScore","compScore","Again","again","Greeting","onSubmit","onGameStart","required","type","onChange","onNameInput","value","placeholder","App","state","gameStart","gameOver","event","this","setState","target","preventDefault","newCompField","compShoot","newPlayerField","playerShoot","setTimeout","bind","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cd9dd0ff.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Cell(props) {\n    const { x, y, hasShip, shooted, isShipVisible, shoot } = props;\n\n    const numbers = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'];\n    const letters = ['Р', 'Е', 'С', 'П', 'У', 'Б', 'Л', 'И', 'К', 'А'];\n\n    const leftColumn = (x === 0) ? true : false;\n    const topLine = (y === 0) ? true : false;\n\n    let marker;\n\n\n    if (hasShip) {\n        if (shooted) {\n            marker = 'X';\n        } else {\n            marker = '';\n        }\n    } else {\n        if (shooted) {\n            marker = '·';\n        } else {\n            marker = '';\n        }\n    }\n    return (\n        <div className={`cell ${hasShip && isShipVisible ? 'visibleShip' : ''}`} onClick={shoot} >\n            <div className=\"marker\">{marker}</div>\n            {leftColumn ? <span className=\"leftColumn\">{numbers[y]}</span> : ''}\n            {topLine ? <span className=\"topLine\">{letters[x]}</span> : ''}\n        </div>\n    )\n};","import React from 'react';\nimport Cell from './Cell.js';\n\nexport default function Field(props) {\n\n    return (\n        <div className='field' >\n\n            <div>\n            {\n                props.field.map(cell => <Cell\n                    x={cell.x}\n                    y={cell.y}\n                    id={cell.id}\n                    key={cell.id}\n                    hasShip={cell.hasShip}\n                    shooted={cell.shooted}\n                    isShipVisible={cell.isShipVisible}\n                    shoot={props.shoot ? id => props.shoot(cell.id) : () => {}}\n                />)\n            }\n            </div>\n\n            <div className='field-name' >\n                <span>{props.whose}</span>\n            </div>\n        </div>\n    )\n};","\nexport const ships = [4, 3, 3, 2, 2, 2, 1, 1, 1, 1];\n\nexport const comp = 'Comp';\nexport const player = 'Player'\n\nexport const createEmptyCell = (x, y, id, whose) => { // Create empty ceil\n    if (whose === player) {\n        return {\n            hasShip: false,\n            x,\n            y,\n            id,\n            shooted: false,\n            isShipVisible: true,\n            className: 'cell'\n        }\n    }\n\n    return {\n        hasShip: false,\n        x,\n        y,\n        id,\n        shooted: false,\n        isShipVisible: false,\n        className: 'cell'\n    }\n\n};\n\nexport const random = (num) => {\n    return Math.floor(Math.random() * num);\n};\n\nexport const createEmptyField = (whose) => { // Create empty field\n    let field = [], id = 0;\n\n    for (let y = 0; y < 10; y++) {\n\n        for (let x = 0; x < 10; x++) {\n\n            field.push(createEmptyCell(x, y, id, whose));\n            id += 1;\n\n        }\n\n    }\n    return field;\n};\n\nexport const chooseVerticalOrientation = () => random(100) > 50 ? true : false;\n\nexport const chooseRandomCellId = () => random(100);\n\n    // console.log(`chooseRandomCellId - id - ${id}`);\n\n\nexport const cloneField = (field) => field.map(cell => ({...cell})); // create deep copy of field\n\nexport const placeShip = (initialField, newField, shipLength, cellId, length, isVertical) => {\n\n    // console.log(`start placeShip`);\n    // // console.log(`initialField - ${JSON.stringify(initialField)}`);\n    // console.log(`newField - ${JSON.stringify(newField)}`);\n    // console.log(`shipLength - ${JSON.stringify(shipLength)}`);\n    // console.log(`cellId - ${JSON.stringify(cellId)}`);\n    // console.log(`length - ${JSON.stringify(length)}`);\n    // console.log(`isVertical - ${JSON.stringify(isVertical)}`);\n\n    if (newField[cellId].hasShip === true) { // New attempt\n            // console.log(`newField[cellId].hasShip == true  - // New attempt`);\n        return placeShip(initialField, cloneField(initialField), shipLength, chooseRandomCellId(), shipLength, chooseVerticalOrientation());\n    } else {\n            // console.log(`newField[cellId].hasShip == false`);\n        newField[cellId].hasShip = true; // Occupy the cell\n        const restLength = length - 1; // Reduce the length\n            // console.log(`restLength = ${restLength}`);\n        if (restLength === 0) {\n                // console.log(`restLength = ${restLength} - return newField`);\n                // console.log(`${JSON.stringify(newField)}`);\n            return newField; // Все палубы корабля расставлены, возвращаем новое поле\n\n        } else {\n            if (isVertical) {\n                    // console.log(`isVertical = ${isVertical}`);\n                const x = newField[cellId].x; // Координата Х следующей ячейки\n                    // console.log(`x = ${x}`);\n                const nextY = newField[cellId].y + 1; // Координата Y следующей ячейки\n                    //  console.log(`nextY = ${nextY}`);\n                if (nextY > 9) { // Такой ячейки не существует. Пробуем снова\n                        // console.log(`nextY = ${nextY}  // Такой ячейки не существует. Пробуем снова ------------------`);\n                    return placeShip(initialField, cloneField(initialField), shipLength, chooseRandomCellId(), shipLength, chooseVerticalOrientation());\n                }\n                 \n                const newCellId = newField.findIndex(cell => cell.x === x && cell.y === nextY); // id следующей ячейки\n                    // console.log(`newCellId = ${newCellId}`);\n                return placeShip(initialField, cloneField(newField), shipLength, newCellId, restLength, isVertical);\n            } else {\n                // console.log(`isVertical = ${isVertical}`);\n                const y = newField[cellId].y; // Координата Y следующей ячейки\n                    // console.log(`y = ${y}`);\n                const nextX = newField[cellId].x + 1; // Координата Х следующей ячейки\n                    //  console.log(`nextX = ${nextX}`);\n                if (nextX > 9) { // Такой ячейки не существует. Пробуем снова\n                        // console.log(`nextX = ${nextX}  // Такой ячейки не существует. Пробуем снова -------------`);\n                    return placeShip(initialField, cloneField(initialField), shipLength, chooseRandomCellId(), shipLength, chooseVerticalOrientation());\n                }\n                 \n                const newCellId = newField.findIndex(cell => cell.x === nextX && cell.y === y); // id следующей ячейки\n                    // console.log(`newCellId = ${newCellId}`);\n                return placeShip(initialField, cloneField(newField), shipLength, newCellId, restLength, isVertical);\n            }\n        };\n    }\n};\n\n// console.log(`Plase ship 4 length -----------------------------`);\n// placeShip(createEmptyField(), createEmptyField(), 4, 92, 4, true);\n\n// const countShips = (field) => field.filter(cell => cell.hasShip === true).length;\n\n// const shipsCellsIds = field => JSON.stringify(field.filter(cell => cell.hasShip === true));\n\n\nexport const fillField = (field, ships) => {\n    // console.log(`start fillField  --- ships - ${ships.length}`);\n    // console.log(`countShips  --- ships - ${countShips(field)}`);\n    if (ships.length === 0) { // All ships are placed, return the completed field\n        // console.log(`ships.length == 0 ------ return field`)\n        return field;\n    }\n    const shipLength = ships[0];\n    // console.log(`shipLength  ---  ${shipLength}`);\n    // console.log(`// Place the ship`);\n    // Place the ship\n    const newField = placeShip(field, cloneField(field), shipLength, chooseRandomCellId(), shipLength, chooseVerticalOrientation());\n\n    const newShips = ships.slice(1); // Remove this ship from the array\n    // console.log(`return fillField(newField, newShips);`);\n    return fillField(newField, newShips);\n};\n\n// console.log(`fillField  ---  ${fillField(createEmptyField(), ships)}`);\n\n// const field = fillField(createEmptyField(), ships);\n// console.log(`shipsCellsIds ------  ${shipsCellsIds(field)}`)\n// console.log(`field str 137  - ${JSON.stringify(field)}`);\n\n\n// console.log(`emptyCeil - ${JSON.stringify(createEmptyCeil(1, 1))}`);\n// console.log(`emptyField - ${JSON.stringify(createEmptyField())}`);\n// console.log(`vertical - ${chooseVerticalOrientation()}`)","import React from 'react';\nimport Field from './Field.js';\nimport { comp } from '../Game/game.js';\n\nexport default function Fields(props) {\n   \n    return (\n        <div className='fields' >\n            <Field whose={props.playerName} field={props.playerField} />\n            <Field whose={comp} field={props.compField} shoot={id => props.shoot(id)} />\n        </div>\n    )\n};","import React from 'react';\n\nexport default function Message(props) {\n\n\treturn (\n\t\t<div className='message centered' >\n\t\t\t<div className='message-text'>\n\t\t\t\t{props.message}\n\t\t\t\t</div>\n\t\t\t<div className='score' >\n\t\t\t\t<span>Ты попал: <strong>{props.playerScore}</strong> раз.</span>\n\t\t\t\t<span>Компьютер попал: <strong>{props.compScore}</strong> раз.</span>\n\t\t\t</div>\n\t\t</div>\n\t)\n\n};","import React from 'react';\n\nexport default function Again(props) {\n\n    return (\n        <div className='again centered' >\n\t\t\t\t<button onClick={props.again} className='button button-again' >Играть еще!</button>\n\t\t</div>\n    )\n    \n};","import React from 'react';\n\nexport default function Greeting(props) {\n\n    return (\n        <div className=\"app-wrapper\" >\n            <div className='greeting centered' >\n                <span>Привет <strong>{props.playerName}</strong>!</span>\n            </div>\n            <div className='propose centered' >\n                <span>Сыграем в морской бой?</span>\n            </div>\n\n            <form onSubmit={props.onGameStart} className='centered' >\n\n                <div>\n                    <input\n                        required\n                        type='text'\n                        onChange={props.onNameInput}\n                        value={props.playerName}\n                        placeholder='Введи свое имя'\n                        className='name-input' />\n                </div>\n\n                <div>\n                    <button type='submit' className='button button-start' >Начать игру!</button>\n                </div>\n\n            </form>\n        </div>\n\n    )\n\n};","import React from 'react';\r\nimport './App.css';\r\nimport Fields from './Components/Fields.js';\r\nimport Message from './Components/Message.js';\r\nimport Again from './Components/Again.js';\r\nimport Greeting from './Components/Greeting.js';\r\nimport {ships, \r\n\t\tcreateEmptyField, \r\n\t\tchooseRandomCellId, \r\n\t\tcloneField, \r\n\t\tcomp,\r\n\t\tplayer,\r\n\t\tfillField } from './Game/game.js';\r\n\t\r\n\r\nexport default class App extends React.Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t  playerName: '',\r\n\t\t  gameStart: false,\r\n\t\t  playerScore: 0,\r\n\t\t  compScore: 0,\r\n\t\t  playerField: [],\r\n\t\t  compField: [],\r\n\t\t  gameOver: false,\r\n\t\t  message: 'Ты стреляешь'\r\n\t\t};\r\n\t};\r\n\t\r\n\tonNameInput(event) {\r\n\t\tthis.setState({\r\n\t\t\tplayerName: event.target.value\r\n\t\t})\r\n\t};\r\n\r\n\tonGameStart(event) {\r\n\t\tevent.preventDefault();\r\n\t\tthis.setState({\r\n\t\t\tgameStart: true\r\n\t\t});\r\n\t};\r\n\r\n\tcomponentDidMount() {  // At the beginning of the game we arrange the ships\r\n\t\tthis.setState({\r\n\t\t\tcompField: fillField(createEmptyField(comp), ships),\r\n\t\t\tplayerField: fillField(createEmptyField(player), ships)\r\n\t\t});\r\n\t};\r\n\r\n\tplayerShoot(cellId) {\r\n\t\tlet {playerScore, gameOver, compField, message} = {...this.state};\r\n\r\n\t\tif ( gameOver || compField[cellId].shooted ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tlet newCompField = cloneField(compField); // Create a computer field clone\r\n\t\t\r\n\t\tnewCompField[cellId].shooted = true; // Note that the cell was shot\r\n\t\t\r\n\t\tif ( newCompField[cellId].hasShip ) {\r\n\r\n\t\t\tnewCompField[cellId].isShipVisible = true; \r\n\t\t\t// If there was a ship in the cell, then it becomes visible\r\n\t\t\tplayerScore += 1; // Increase player score\r\n\t\t\t\r\n\t\t}\r\n\r\n\t\tmessage = 'Стреляет компьтер';\r\n\r\n\t\tif  ( playerScore === 20 ) {\r\n\r\n\t\t\tgameOver = true;\r\n\t\t\tmessage = 'Игра окончена. Ты победил! Поздравляю!';\r\n\r\n\t\t}\r\n\r\n\t\treturn this.setState({\r\n\t\t\tgameOver,\r\n\t\t\tplayerScore,\r\n\t\t\tcompField: newCompField,\r\n\t\t\tmessage\r\n\t\t});\r\n\t};\r\n\r\n\tcompShoot() {\r\n\t\tlet {gameOver, playerField, compScore, message} = {...this.state};\r\n\t\tconst cellId = chooseRandomCellId();\t\t\r\n\r\n\t\tif ( gameOver ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif ( playerField[cellId].shooted === true ) {\r\n\t\t\treturn this.compShoot();\r\n\t\t}\r\n\r\n\t\tlet newPlayerField = cloneField(playerField);\r\n\t\tnewPlayerField[cellId].shooted = true;\r\n\r\n\t\tif ( newPlayerField[cellId].hasShip ) {\r\n\t\t\tcompScore += 1;\r\n\t\t}\r\n\r\n\t\tmessage = 'Ты стреляешь';\r\n\r\n\t\tif ( compScore === 20 ) {\r\n\t\t\tgameOver = true;\r\n\t\t\tmessage = 'Игра окончена. Победил компьютер. Не расстраивайся, в следующий раз повезет!';\r\n\t\t}\r\n\r\n\t\treturn this.setState({\r\n\t\t\tgameOver,\r\n\t\t\tcompScore,\r\n\t\t\tplayerField: newPlayerField,\r\n\t\t\tmessage\r\n\t\t});\r\n\t};\r\n\r\n\tshoot(id) {\r\n\r\n\t\tthis.playerShoot(id);\r\n\r\n\t\tsetTimeout(this.compShoot.bind(this), 1000); \r\n\t\t// Delay so that the computer does not respond immediately\r\n\r\n\t};\r\n\r\n\tagain() {\r\n\r\n\t\treturn this.setState({\r\n\t\t\tplayerName: this.state.playerName,\r\n\t\t\tplayerScore: 19,\r\n\t\t\tcompScore: 0,\r\n\t\t\tcompField: fillField(createEmptyField(comp), ships),\r\n\t\t\tplayerField: fillField(createEmptyField(player), ships),\r\n\t\t\tgameOver: false,\r\n\t\t\tmessage: 'Ты стреляешь'\r\n\t\t})\r\n\t};\r\n\r\n\trender() {\r\n\r\n\t\tif ( !this.state.gameStart ) {\r\n\t\t\treturn (\r\n\t\t\t\t<Greeting \r\n\t\t\t\t\tplayerName={this.state.playerName} \r\n\t\t\t\t\tonGameStart={this.onGameStart.bind(this)} \r\n\t\t\t\t\tonNameInput={this.onNameInput.bind(this)} \r\n\t\t\t\t\t/>\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div className='app-wrapper' >\r\n\r\n\t\t\t\t<div className='game centered' >\r\n\r\n\t\t\t\t\t<span className='game-header'>Ну давай играть <strong>{this.state.playerName}</strong></span>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<Fields \r\n\t\t\t\t\t\tplayerField={this.state.playerField} \r\n\t\t\t\t\t\tcompField={this.state.compField} \r\n\t\t\t\t\t\tshoot={this.shoot.bind(this) } \r\n\t\t\t\t\t\tplayerName={this.state.playerName}\r\n\t\t\t\t\t\tclassName='game-fields'\r\n\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t<Message \r\n\t\t\t\t\t\tmessage={this.state.message} \r\n\t\t\t\t\t\tplayerScore={this.state.playerScore} \r\n\t\t\t\t\t\tcompScore={this.state.compScore} \r\n\t\t\t\t\t\tclassName='game-message'\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t{ this.state.gameOver ? <Again again={this.again.bind(this)} /> : '' }\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n};","import './index.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}